<div class="container-fluid">
  <%= flash[:notice] %>
  <div class="row">
    <div class="col d-flex justify-content-center">
      <% if @user == current_user %>
        <button class="show-modal"><i class="fas fa-plus"></i>&nbsp;Add Events</button>
      <% end %>
    </div>
  </div>
  <div class="content">
    <div class="calendar">
      <div class="month">
        <i class="prev"><</i>
        <div class="date">
          <h1></h1>
          <p></p>
        </div>
        <i class="next">></i>
      </div>
      <div class="weekdays">
        <div>Sun</div>
        <div>Mon</div>
        <div>Tue</div>
        <div>Wed</div>
        <div>Thu</div>
        <div>Fri</div>
        <div>Sat</div>
      </div>
      <div class="days"></div>
    </div>
    <% if @schedules.present? %>
      <div class="events">
        <%= render partial: 'public/schedule/show_event_detail', collection: @schedules, as: "schedule" %>
      </div>
    <% end %>
  </div>

</div>
<!--モーダル-->
<div class="my_modal hidden">
  <button class="close_my_modal">&times;</button>
  <h1>New Events?</h1>
  <div class="new_event_form_area">
    <div class="new_event_form">
      <%= render 'public/schedule/form', schedule: @schedule_new %>
    </div>
  </div>
</div>
<div class="overlay hidden"></div>


<script>
  'use strict';

  document.addEventListener("DOMContentLoaded", function(){
    const date = new Date();

    const prevBtn = document.querySelector(".prev");
    const nextBtn = document.querySelector(".next");

    //モーダルウインドウ
    const showModal = document.querySelector(".show-modal");
    const modal = document.querySelector(".my_modal");
    const overlay = document.querySelector(".overlay");
    const btnCloseModal = document.querySelector(".close_my_modal");

  　//モーダルを開く
    const openModal = function () {
      modal.classList.remove("hidden");
      overlay.classList.remove("hidden");
    }
    //モーダルを閉じる
    const closeModal = function() {
      modal.classList.add("hidden");
      overlay.classList.add("hidden");
    }
  　//カレンダー表示
    const renderCalendar = function() {

      date.setDate(1);

      const monthDays = document.querySelector('.days');

      const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();

      const prevLastDay = new Date(date.getFullYear(), date.getMonth(), 0).getDate();
      //前の月の最終日を取得する

      const firstDayIndex = date.getDay();
      //firstDayIndex = 0 means that first day of this month is on Monday

      const lastDayIndex = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDay();
      // lastDayIndex = 3 means that last day of this month is on Wednesday.

      const nextDays = 7 - lastDayIndex - 1;
      // 今月の最終日の曜日の位置を取得するlastDayIndexから７を引き、
      //１を引くと次の月の最初の週の日付（今月分に表示する）の数を取得できる

      const months = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "Decempber",
        ]

      document.querySelector('.date h1').innerHTML
      = months[date.getMonth()];
      //date.getMonth() 現在の月を取得する

      document.querySelector('.date p').innerHTML
      = date.toDateString();
      //date.toDateString 現在の年月日曜日を英語で空白区切りで取得する

      let days = "";

      for(let x = firstDayIndex; x > 0; x--){
        // 今月のカレンダーに、前の月の最終週の日付を追加したい
        // 最終週の日にちの数は、今月の1日がどの曜日に位置するかで取得することができる
        // prevLastDay（7月31日）からfirstDayIndex（１=月曜日）を引き、
        // 取得できる値（３０）にfirstDayIndex（１）を足すことで、前の月の最終週の日付を取得することができる
        days += `<div class="prev-date ${prevLastDay - x + 1}">${prevLastDay - x + 1}</div>`
        // days（今月の日付）に足す
      }

      for (let i = 1; i <= lastDay; i++) {
        if(i === new Date().getDate() && date.getMonth() === new Date().getMonth()) {
          days += `<div class="today this-days ${i}">${i}</div>`;
        } else {
          days += `<div class="this-days" id="this-days--${i}">${i}</div>`;
        }
      }

      for (let j = 1; j <= nextDays; j++) {
        days += `<div class="next-date ${j}">${j}</div>`
      }
      monthDays.innerHTML = days;

    };

    //前の月のカレンダーを表示する
    prevBtn.addEventListener('click', function() {
      date.setMonth(date.getMonth() - 1);
      renderCalendar();
    });
  　 //次の月のカレンダーを表示する
    nextBtn.addEventListener('click', function() {
      date.setMonth(date.getMonth() + 1);
      renderCalendar();
    });

    renderCalendar();

    showModal.addEventListener('click', openModal);
    btnCloseModal.addEventListener('click', closeModal);
    overlay.addEventListener('click', closeModal);
  }, false);

</script>
